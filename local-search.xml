<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ 锁类型汇总(二)</title>
    <link href="/2020/10/25/C-lock2/"/>
    <url>/2020/10/25/C-lock2/</url>
    
    <content type="html"><![CDATA[<h3 id="RAII式锁管理器"><a href="#RAII式锁管理器" class="headerlink" title="RAII式锁管理器"></a>RAII式锁管理器</h3><p>RAII（Resource Acquisition Is Initialization），即资源获取即初始化，<br>我们在使用mutex的时候，需要进行3步，1.mutex的初始化；2.调用lock获取锁；3.调用unlock释放锁。<br>而RAII式锁管理器不需要2、3的手工操作，锁的lock、unlock、资源的释放由系统统一管理。<br>C++标准库提供如下锁管理器：lock_guard(C++11)、scope_guard(C++17)、unique_lock(C++11)、shared_lock(C++14)。</p><h3 id="lock-guard"><a href="#lock-guard" class="headerlink" title="lock_guard"></a>lock_guard</h3><p>lock_guard是mutex的RAII包装体，为最基础的锁管理器，创建lock_guard对象时自动上锁，在退出作用域后自动解锁。<br>lock_guard不可复制，不可移动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">std::mutex mutex;<br>void func()<br>&#123;<br>    std::lock_guard&lt;std::mutex&gt; lock(mutex);<br>    //<span class="hljs-keyword">do</span> something;<br>&#125;<br></code></pre></td></tr></table></figure><p>锁在lock创建时自动上锁，在退出func作用域后自动解锁，无需额外的手工操作。</p><h3 id="unique-lock"><a href="#unique-lock" class="headerlink" title="unique_lock"></a>unique_lock</h3><p>unique_lock是C++11引入的独占式锁的管理器，是个类模板，比lock_guard更灵活，支持mutex、time_mutex、recursive_mutex等。可以延迟锁定、可移动，不可拷贝，具体定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">template&lt;class Mutex&gt;<br>class unique_lock;<br></code></pre></td></tr></table></figure><p>lock_guard没有提供额外的lock/unlock接口，只能在作用域结束自动解锁。unique_lock提供了主动的锁定解锁接口。因为要维护内部锁的状态，所以效率要比lock_guard低一点。unique_lock提供了lock、try_lock、try_lock_for、try_lock_until锁定接口以及解锁接口unlock。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">lock</td><td align="left">锁定函数</td></tr><tr><td align="left">try_lock</td><td align="left">尝试锁定，失败立即返回</td></tr><tr><td align="left">try_lock_for</td><td align="left">可传入参数要阻塞的时长，阻塞直至指定的时长或获得锁后返回，成功true，失败false</td></tr><tr><td align="left">try_lock_until</td><td align="left">传入参数阻塞的时间点，阻塞直至指定的时间点或获得锁后返回，成功true，失败false</td></tr><tr><td align="left">unlock</td><td align="left">解除锁定</td></tr></tbody></table><p>此外unique_lock还提供了swap、release修改锁状态的方法，以及owns_lock等获取锁状态的方法。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">swap</td><td align="left">与另一个锁交换状态</td></tr><tr><td align="left">release</td><td align="left">打断现有所有权，不解锁，由调用方拥有新的所有权</td></tr><tr><td align="left">owns_lock</td><td align="left">测试是否占有锁的所有权，此外重载的opterator bool 起同样作用</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">class A &#123;<br>  mutex m;<br>  // something<br>  void process()<br>  &#123;<br>    unique_lock&lt;mutex&gt; guard(m) // 初始化即上锁<br>    // <span class="hljs-keyword">do</span> something<br>    guard.unlock(); // 解锁<br>    // <span class="hljs-keyword">do</span> something;<br>    guard.lock(); // 上锁<br>    // 退出作用域析构自动解锁<br>  &#125;<br>  // 延迟锁定<br>  void processWithDefer()<br>  &#123;<br>    unique_lock&lt;mutex&gt; guard(m, defer_lock) // 初始化不锁定<br>    guard.lock();  //第一次上锁<br>    // <span class="hljs-keyword">do</span> something<br>    // 析构解锁<br>  &#125;<br>  // movable<br>  void porcessMove()<br>  &#123;<br>    unique_lock&lt;mutex&gt; guard1(m);<br>    unique_lock&lt;mutex&gt; guard2 = move(guard1);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 锁类型汇总(一)</title>
    <link href="/2020/10/14/C-lock/"/>
    <url>/2020/10/14/C-lock/</url>
    
    <content type="html"><![CDATA[<h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><p>mutex即信号量，用于避免多线程同时访问共享数，std::mutex类从C++11开始支持。<br>std::mutex提供阻塞式锁定函数lock()和非阻塞式锁定函数try_lock(),解锁则提供unlock()。<br>lock():用于锁定互斥，若已被另一线程锁定时则阻塞线程直到获得锁。<br>try_lock():尝试锁定互斥，立即返回，若锁不可用返回false，否则返回true。<br>unlock():释放锁，解锁互斥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;mutex&gt;</span><br><span class="hljs-comment">#include &lt;thread&gt;</span><br>std::mutex g_mutex;<br>void thread1()<br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mutex.try_lock()) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;try lock successfully!&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot; get lock failed!&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span>;<br>&#125;<br>void thread2()<br>&#123;<br>    mutex.lock();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;lock successfully!&quot;</span> &lt;&lt; std::endl;<br>    mutex.unlock();<br>    <span class="hljs-built_in">return</span>;<br>&#125;<br>void main()<br>&#123;<br>   std::thread t1(thread1);<br>   std::thread t2(thread2);<br><br>   t1.join();<br>   t2.join();<br>&#125;<br></code></pre></td></tr></table></figure><p>C++11还提供了mutex的不同版本，包括timed_mutex， recursive_mutex，recursive_timed_lock_for()和_mutex， shared_mutex(C++17),shared_timed_mutex(C++14).  </p><h3 id="timed-mutex-C-11"><a href="#timed-mutex-C-11" class="headerlink" title="timed_mutex(C++11)"></a>timed_mutex(C++11)</h3><p>std::timed_mutex时mutex的加时版本，timed_mutex在mutex的基础上额外提供了try_lock_for()和try_lock_until()，使用这两个函数来实现带限时的互斥锁功能。<br>try_lock_for(const std::chrono::duration&lt;Rep,Period&gt;&amp; timeout_duration):阻塞直到timeout_duration时间或者获得锁，二者满足一个就返回，成功返回true，失败返回false。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">mutex.try_lock_for(std::chrono::milliseconds(100));<br>.... // <span class="hljs-keyword">do</span> something<br>mutex.unlock();<br>```  <br>try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;&amp; timeout_time)：功能类似try_lock_for,区别时入参为超时的时间点，而不是等待的时长。  <br>```bash<br>mutex.try_lock_until(std::chrono::steady_clock::now() + std::chrono::seconds(10));<br>... //<span class="hljs-keyword">do</span> something<br>mutex.unlock()<br>```  <br><span class="hljs-comment">### recursive_mutex（C++11）</span><br>std::recursive_mutex是mutex的递归版本，在互斥锁的基础上允许占用锁的线程通过lock或try_lock多次获得锁，对锁的所有权在线程调用  <br>相对应次数的unlock时结束。  <br>recursive_mutex 的使用场景之一是保护类中的共享状态，而类的成员函数可能相互调用。<br>```bash<br>class A &#123;<br>    std::recursive_mutex mutex;<br>public:<br>    void T1()<br>    &#123;<br>        mutex.lock();<br>        // process some share resource<br>        mutex.unlock();<br>    &#125;<br>    void T2()<br>    &#123;<br>        mutex.lock()<br>        T1();<br>        // <span class="hljs-keyword">do</span> something<br>        mutex.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="recursive-timed-mutex-C-11"><a href="#recursive-timed-mutex-C-11" class="headerlink" title="recursive_timed_mutex(C++11)"></a>recursive_timed_mutex(C++11)</h3><p>std::recursive_timed_mutex是recursive_mutex的限时版本，相当于recursive_mutex和timed_mutex的累加版本，在recursive_timed_mutex<br>的基础上增加了try_lock_for和try_lock_until。</p><h3 id="shared-mutex-C-17"><a href="#shared-mutex-C-17" class="headerlink" title="shared_mutex(C++17)"></a>shared_mutex(C++17)</h3><p>std::shared_mutex是共享互斥锁，即读写锁，同时只能有一个线程获取锁，但允许多个线程共享锁。<br>shared_mutex拥有两个访问级别：共享——多个线程共享一个锁的所有权；独占——仅一个线程占有锁<br>若线程已获取独占性锁，则其他线程无法再获取锁(包括共享)。仅当无线程获取独占性锁时，共享锁才能被多个线程获取。<br>在一个线程内，同时只能获取一个锁。共享锁在lock，try_lock外还提供了共享锁定函数lock_shared和try_lock_shared，<br>对应的解锁函数为unlock_shared。<br>lock_shared():获取锁的共享所有权，若另一线程独占锁，则保持阻塞直到获取到锁。<br>try_lock_shared(): 尝试获取锁的共享所有权，若获取到则返回true，否则false。。  </p><h3 id="shared-timed-mutex-C-14"><a href="#shared-timed-mutex-C-14" class="headerlink" title="shared_timed_mutex(C++14)"></a>shared_timed_mutex(C++14)</h3><p>std::shared_timed_mutex是shared_mutex的限时版本，额外提供了函数：try_lock_shared_for和try_lock_shared_until。<br>该版本先于不限时版本，因为当时赶着把共享互斥锁加进去已经来不及了。<br>try_lock_shared_for(const std::chrono::duration&lt;Rep,Period&gt;&amp; timeout_duration)：在timeout_duration时间内<br>尝试以共享模式获取互斥锁，获取到锁或达到超时时间后返回。<br>try_lock_shared_until(const std::chrono::time_point&lt;Clock,Duration&gt;&amp; timeout_time):和try_lock_shared_for<br>的区别是该函数中timeout_time是时间点而不是时间段。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
